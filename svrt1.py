# -*- coding: utf-8 -*-
"""svrt1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1OKC3BuWYfT5RDMBoh712ZLhDXtX70Q
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Dense, Flatten, Reshape, Input, Conv2D
import matplotlib.pyplot as plt
import numpy as np

gpus = tf.config.experimental.list_physical_devices('GPU')
print(gpus)
for gpu in gpus:
  tf.config.experimental.set_memory_growth(gpu, True)

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

x_dataset = tf.data.Dataset.from_tensor_slices(x_train)
y_dataset = tf.data.Dataset.from_tensor_slices(y_train)

def process_x(x):
  img = tf.cast(x, tf.float32)/255
  return img

def process_y(y):
  y = tf.one_hot(y, 10)
  return y

x_dataset = x_dataset.map(process_x)
y_dataset = y_dataset.map(process_y)
dataset = tf.data.Dataset.zip((x_dataset, y_dataset))
dataset = dataset.shuffle(1000)
dataset = dataset.batch(64)
AUTOTUNE = tf.data.AUTOTUNE
dataset = dataset.cache().prefetch(buffer_size=AUTOTUNE)

def imshow():
  n = 10
  plt.figure(figsize=(10, 6))
  for images, labels in dataset.take(1):
    for i in range(n):
      img = images[i]
      ax = plt.subplot(3, n, i + 1 + n)
      plt.imshow(img, cmap='gist_gray')
      plt.axis('off')
      ax.get_yaxis().set_visible(False)
  plt.show()
imshow()

inputs = Input(shape = (28, 28))
x = Reshape((28, 28, 1))(inputs)
x = Conv2D(32, 3, activation = 'relu', padding = 'same')(x)
x = Conv2D(32, 3, activation = 'relu',strides = 2, padding = 'same')(x)
x = Conv2D(64, 3, activation = 'relu', padding = 'same')(x)
x = Conv2D(64, 3, activation = 'relu', strides = 2, padding = 'same')(x)
x = Conv2D(128, 3, activation = 'relu', padding = 'same')(x)
x = Conv2D(128, 3, activation = 'relu', strides = 2, padding = 'same')(x)
x = Flatten()(x)
x = Dense(128, activation = 'relu')(x)
x = Dense(10, activation = 'sigmoid')(x)
outputs = x
cnn = keras.Model(inputs, outputs)

cnn.summary()

class Model(tf.keras.Model):
  def __init__(self, nn):
    super(Model, self).__init__()
    self.nn = nn
  def get_loss(self, y, preds):
    loss = tf.keras.losses.CategoricalCrossentropy()(y, preds)
    return loss
  @tf.function
  def training_step(self, x, y):
    with tf.GradientTape() as tape:
      preds = self.nn(x)
      loss = self.get_loss(y, preds)
    gradients = tape.gradient(loss, self.nn.trainable_variables)
    self.optimizer.apply_gradients(zip(gradients, self.nn.trainable_variables))
    return tf.reduce_mean(loss)

model = Model(cnn)
model.compile(optimizer = tf.keras.optimizers.Adam(1e-3))

for x, y in dataset.take(1):
  print(model.training_step(x, y))

from IPython.display import clear_output
hist = np.array(np.empty([0]))
epochs = 30
for epoch in range(1, epochs + 1):
  loss = 0
  for step, (x, y) in enumerate(dataset):
    loss+=model.training_step(x, y)
  clear_output(wait=True)
  print(epoch)
  hist = np.append(hist, loss)
  plt.plot(np.arange(0, len(hist)), hist)
  plt.show()

def imshow_and_pred():
  n = 10
  plt.figure(figsize=(10, 6))
  for images, labels, in dataset.take(1):
    for i in range(n):
      img = images[i]
      img_tensor = tf.expand_dims(img, axis = 0)
      pred = model.nn(img_tensor)
      pred = pred.numpy()

      ax = plt.subplot(3, n, i + 1 + n)
      plt.imshow(img, cmap = 'gist_gray')
      ma = pred.max()
      print(ma, "///", pred)
      res = np.where(pred == ma)

      plt.title(res[1][0])
      plt.axis('off')
      ax.get_yaxis().set_visible(False)
  plt.show()
imshow_and_pred()